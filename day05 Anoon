1. Stack
  #include <stdio.h>
#define STACK_SIZE 1000
typedef float T;
typedef struct{
    T elements[STACK_SIZE];
    int _size;
    int _top;
}Stack;
void StackInit(Stack* stk);
void StackPush(Stack* stk,T element);
int StackEmpty(Stack* stk);
T StackTop(Stack* stk);
void StackPop(Stack* stk);
int main() {
    Stack stk;
    StackInit(&stk);
    float salaries[]={50000,40000,48000,23000,2000};
    for(int i=0;i<5;i++){
        StackPush(&stk,salaries[i]);
    }
    printf("Salaries from stack:\n");
    while(!StackEmpty(&stk)){
        float sal=StackTop(&stk);
        printf("%.2",sal);
        StackPop(&stk);
    }
    return 0;
}
void StackInit(Stack* stk){
    stk->_size=0;
    stk->_top=-1;
}
void StackPush(Stack* stk,T element){
    stk->elements[stk->_size]=element;
    stk->_size++;
    stk->_top++;
}
int StackEmpty(Stack* stk){
    return (stk->_top ==-1);
}
T StackTop(Stack* stk){
    return stk->elements[stk->_top];
}
void StackPop(Stack* stk){
    if(StackEmpty(stk)){
        printf("Stack is empty.\n");
        return;
    }
    stk->_top--;
    stk->_size--;
}
2. Queue
 #include <stdio.h>
#define STACK_SIZE 1000
typedef float T;
typedef struct{
    T elements[STACK_SIZE];
    int _size;
    int _front;
    int _back;
}Queue;
void QueueInit(Queue* stk);
void QueuePush(Queue* stk,T element);
int QueueEmpty(Queue* stk);
T QueueFront(Queue* stk);
T QueueBack(Queue* stk);
void QueuePop(Queue* stk);
int main() {
    Queue stk;
    QueueInit(&stk);
    float salaries[]={50000,40000,48000,23000,2000};
    for(int i=0;i<5;i++){
        QueuePush(&stk,salaries[i]);
    }
    printf("Salaries from Queue:\n");
    while(!QueueEmpty(&stk)){
        float sal=QueueFront(&stk);
        printf("%.2",sal);
        QueuePop(&stk);
    }
    return 0;
}
void QueueInit(Queue* stk){
    stk->_size=0;
    stk->_front=-1;
    stk->_back=-1;
}
void QueuePush(Queue* stk,T element){
    stk->_back++;
    stk->elements[stk->_back]=element;
    stk->_size++;
    if(stk->_front==-1){
        stk->_front=0;
    }
}
int QueueEmpty(Queue* stk){
    return (stk->_front ==-1);
}
T QueueFront(Queue* stk){
    return stk->elements[stk->_front];
}
T QueueBack(Queue* stk){
    return stk->elements[stk->_back];
}
void QueuePop(Queue* stk){
    if(QueueEmpty(stk)){
        printf("Queue is empty.\n");
        return;
    }
    if(stk->_front==stk->_back){
       stk->_front=-1;
       stk->_back=-1;
       stk->_size=0;
    }else{
       stk->_front++;
    }

}
